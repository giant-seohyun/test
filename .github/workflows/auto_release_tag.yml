name: Auto Release

on:
  pull_request:
    types: [closed]
    branches:
      - "main"

# 권한 설정
permissions:
  contents: write
  pull-requests: write

jobs:
  create-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 전체 git 히스토리 필요

      - name: Get latest tag
        id: get-latest-tag
        run: |
          # 최신 태그 가져오기 (없으면 v0.0.0으로 시작)
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

          # 버전 번호 추출 및 증가
          version=${latest_tag#v}  # v 제거
          IFS='.' read -r major minor patch <<< "$version"
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # 최신 태그부터 현재까지의 커밋 메시지 수집
          changelog=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-latest-tag.outputs.new_version }}
          release_name: Release ${{ steps.get-latest-tag.outputs.new_version }}
          body: |
            ## 변경사항
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Create new tag
        run: |
          git tag ${{ steps.get-latest-tag.outputs.new_version }}
          git push origin ${{ steps.get-latest-tag.outputs.new_version }}
