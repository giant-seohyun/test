name: Auto Release

on:
  pull_request:
    types: [closed]
    branches:
      - "main"

# 권한 설정
permissions:
  contents: write
  pull-requests: write

jobs:
  create-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 전체 git 히스토리 필요

      - name: Get latest tag
        id: get-latest-tag
        run: |
          # 최신 태그 가져오기 (없으면 v0.0.0으로 시작)
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

          # 버전 번호 추출
          version=${latest_tag#v}  # v 제거
          IFS='.' read -r major minor patch <<< "$version"

          # PR 제목에 따라 버전 증가 결정
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" == *"[MAJOR]"* || "$PR_TITLE" == *"[BREAKING]"* ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$PR_TITLE" == *"[MINOR]"* || "$PR_TITLE" == *"[FEATURE]"* ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_version="v$major.$minor.$patch"
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # 최신 태그부터 현재까지의 메인 PR 제목 수집
          main_pr=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD | grep -E "^.*\(#[0-9]+\)$" || echo "변경사항 없음")

          # develop 브랜치의 PR 제목들 수집
          develop_prs=""
          if [[ "$main_pr" == *"Develop merge"* ]]; then
            # develop 브랜치의 마지막 머지 커밋 해시 찾기
            develop_merge_hash=$(git log -1 --pretty=format:"%H" origin/develop)
            
            # develop 브랜치의 이전 태그나 머지 이후의 PR 제목들 수집
            develop_prs=$(git log --pretty=format:"    - %s" origin/develop...$(git merge-base origin/develop HEAD) | grep -E "^.*\(#[0-9]+\)$" || echo "    - 변경사항 없음")
          fi

          # 최종 changelog 생성
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$main_pr" >> $GITHUB_OUTPUT
          if [[ ! -z "$develop_prs" ]]; then
            echo "$develop_prs" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-latest-tag.outputs.new_version }}
          release_name: ${{ steps.get-latest-tag.outputs.new_version }}
          body: |
            ## 변경사항
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Create new tag
        run: |
          git tag ${{ steps.get-latest-tag.outputs.new_version }}
          git push origin ${{ steps.get-latest-tag.outputs.new_version }}
